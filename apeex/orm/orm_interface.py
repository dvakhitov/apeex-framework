# apeex/orm_interface.py
from typing import Protocol, Iterable, Optional, Any, Type, Mapping
from class_metadata import ClassMetadata

class OrmEngineInterface(Protocol):
    def get_entity_manager(self) -> "EntityManagerInterface": ...

class EntityManagerInterface(Protocol):
    def persist(self, entity: Any) -> None: ...
    def remove(self, entity: Any) -> None: ...
    def find(self, entity_class: Type, id: Any) -> Optional[Any]: ...
    def flush(self) -> None: ...
    def clear(self) -> None: ...

class UnitOfWorkInterface(Protocol):
    def register_new(self, entity: Any) -> None: ...
    def register_dirty(self, entity: Any) -> None: ...
    def register_removed(self, entity: Any) -> None: ...
    def commit(self) -> None: ...  # applies changes via engine adapter

class RepositoryInterface(Protocol):
    def find(self, id: Any) -> Optional[Any]: ...
    def find_all(self) -> Iterable[Any]: ...
    def find_by(self, criteria: Mapping[str, Any]) -> Iterable[Any]: ...

class MapperRegistryInterface(Protocol):
    def get_metadata(self, entity_class: Type) -> "ClassMetadata": ...
